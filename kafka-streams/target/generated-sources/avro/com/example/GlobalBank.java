/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class GlobalBank extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 476456815478811462L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"GlobalBank\",\"namespace\":\"com.example\",\"fields\":[{\"name\":\"bankname\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Bank Name\"},{\"name\":\"accountname\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Account Holder Name\"},{\"name\":\"amount\",\"type\":\"int\",\"doc\":\"Balance Amount\"}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<GlobalBank> ENCODER =
      new BinaryMessageEncoder<GlobalBank>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<GlobalBank> DECODER =
      new BinaryMessageDecoder<GlobalBank>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<GlobalBank> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<GlobalBank> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<GlobalBank> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<GlobalBank>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this GlobalBank to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a GlobalBank from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a GlobalBank instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static GlobalBank fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Bank Name */
   private java.lang.String bankname;
  /** Account Holder Name */
   private java.lang.String accountname;
  /** Balance Amount */
   private int amount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public GlobalBank() {}

  /**
   * All-args constructor.
   * @param bankname Bank Name
   * @param accountname Account Holder Name
   * @param amount Balance Amount
   */
  public GlobalBank(java.lang.String bankname, java.lang.String accountname, java.lang.Integer amount) {
    this.bankname = bankname;
    this.accountname = accountname;
    this.amount = amount;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return bankname;
    case 1: return accountname;
    case 2: return amount;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: bankname = (java.lang.String)value$; break;
    case 1: accountname = (java.lang.String)value$; break;
    case 2: amount = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'bankname' field.
   * @return Bank Name
   */
  public java.lang.String getBankname() {
    return bankname;
  }



  /**
   * Gets the value of the 'accountname' field.
   * @return Account Holder Name
   */
  public java.lang.String getAccountname() {
    return accountname;
  }



  /**
   * Gets the value of the 'amount' field.
   * @return Balance Amount
   */
  public int getAmount() {
    return amount;
  }



  /**
   * Creates a new GlobalBank RecordBuilder.
   * @return A new GlobalBank RecordBuilder
   */
  public static com.example.GlobalBank.Builder newBuilder() {
    return new com.example.GlobalBank.Builder();
  }

  /**
   * Creates a new GlobalBank RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new GlobalBank RecordBuilder
   */
  public static com.example.GlobalBank.Builder newBuilder(com.example.GlobalBank.Builder other) {
    if (other == null) {
      return new com.example.GlobalBank.Builder();
    } else {
      return new com.example.GlobalBank.Builder(other);
    }
  }

  /**
   * Creates a new GlobalBank RecordBuilder by copying an existing GlobalBank instance.
   * @param other The existing instance to copy.
   * @return A new GlobalBank RecordBuilder
   */
  public static com.example.GlobalBank.Builder newBuilder(com.example.GlobalBank other) {
    if (other == null) {
      return new com.example.GlobalBank.Builder();
    } else {
      return new com.example.GlobalBank.Builder(other);
    }
  }

  /**
   * RecordBuilder for GlobalBank instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<GlobalBank>
    implements org.apache.avro.data.RecordBuilder<GlobalBank> {

    /** Bank Name */
    private java.lang.String bankname;
    /** Account Holder Name */
    private java.lang.String accountname;
    /** Balance Amount */
    private int amount;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.GlobalBank.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.bankname)) {
        this.bankname = data().deepCopy(fields()[0].schema(), other.bankname);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.accountname)) {
        this.accountname = data().deepCopy(fields()[1].schema(), other.accountname);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.amount)) {
        this.amount = data().deepCopy(fields()[2].schema(), other.amount);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing GlobalBank instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.GlobalBank other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.bankname)) {
        this.bankname = data().deepCopy(fields()[0].schema(), other.bankname);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.accountname)) {
        this.accountname = data().deepCopy(fields()[1].schema(), other.accountname);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.amount)) {
        this.amount = data().deepCopy(fields()[2].schema(), other.amount);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'bankname' field.
      * Bank Name
      * @return The value.
      */
    public java.lang.String getBankname() {
      return bankname;
    }


    /**
      * Sets the value of the 'bankname' field.
      * Bank Name
      * @param value The value of 'bankname'.
      * @return This builder.
      */
    public com.example.GlobalBank.Builder setBankname(java.lang.String value) {
      validate(fields()[0], value);
      this.bankname = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'bankname' field has been set.
      * Bank Name
      * @return True if the 'bankname' field has been set, false otherwise.
      */
    public boolean hasBankname() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'bankname' field.
      * Bank Name
      * @return This builder.
      */
    public com.example.GlobalBank.Builder clearBankname() {
      bankname = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'accountname' field.
      * Account Holder Name
      * @return The value.
      */
    public java.lang.String getAccountname() {
      return accountname;
    }


    /**
      * Sets the value of the 'accountname' field.
      * Account Holder Name
      * @param value The value of 'accountname'.
      * @return This builder.
      */
    public com.example.GlobalBank.Builder setAccountname(java.lang.String value) {
      validate(fields()[1], value);
      this.accountname = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'accountname' field has been set.
      * Account Holder Name
      * @return True if the 'accountname' field has been set, false otherwise.
      */
    public boolean hasAccountname() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'accountname' field.
      * Account Holder Name
      * @return This builder.
      */
    public com.example.GlobalBank.Builder clearAccountname() {
      accountname = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'amount' field.
      * Balance Amount
      * @return The value.
      */
    public int getAmount() {
      return amount;
    }


    /**
      * Sets the value of the 'amount' field.
      * Balance Amount
      * @param value The value of 'amount'.
      * @return This builder.
      */
    public com.example.GlobalBank.Builder setAmount(int value) {
      validate(fields()[2], value);
      this.amount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'amount' field has been set.
      * Balance Amount
      * @return True if the 'amount' field has been set, false otherwise.
      */
    public boolean hasAmount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'amount' field.
      * Balance Amount
      * @return This builder.
      */
    public com.example.GlobalBank.Builder clearAmount() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public GlobalBank build() {
      try {
        GlobalBank record = new GlobalBank();
        record.bankname = fieldSetFlags()[0] ? this.bankname : (java.lang.String) defaultValue(fields()[0]);
        record.accountname = fieldSetFlags()[1] ? this.accountname : (java.lang.String) defaultValue(fields()[1]);
        record.amount = fieldSetFlags()[2] ? this.amount : (java.lang.Integer) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<GlobalBank>
    WRITER$ = (org.apache.avro.io.DatumWriter<GlobalBank>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<GlobalBank>
    READER$ = (org.apache.avro.io.DatumReader<GlobalBank>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.bankname);

    out.writeString(this.accountname);

    out.writeInt(this.amount);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.bankname = in.readString();

      this.accountname = in.readString();

      this.amount = in.readInt();

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.bankname = in.readString();
          break;

        case 1:
          this.accountname = in.readString();
          break;

        case 2:
          this.amount = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










